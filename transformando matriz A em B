#include <iostream>
#include <cstdlib>
#include <iomanip>

//Guilherme França Stelmann N°13678571

using namespace std;


class processos{//é a classe principal, nela os processos acontecem
    public:
    int ordem;//int que representa a ordem da matriz
    
    float A[50][50], B[50][50];// são as matrizes, tem valor maximo de ordem 50 pois acho conveniente assim, não necessariamente usa as 50 casas
    
    void preencher(){//tem a função de te deixar preencher a matriz A, preenche uma linha inteira e depois vai para a proxima
	int i=0,j=0;//i vai representar as linhas, j as colunas
	while(i<=(ordem-1)){//ordem é a ordem da matriz, e como na programação as matrizes começam no 0,0, ordem-1 representa a ultima linha/coluna, assim, se i passar de ordem-1vai dar problema
		if(j>(ordem-1)){//mesmo motivação, não pode extraolar os limites delimitados, se j passar, significa que já acabou a linha e assim passamos para a próxima
			j=0;
			i++;
		}
		if(i<=(ordem-1)){//processo em que você preenche a matriz A, vai de valor em valor, indicando a linha e a coluna em que você vai estar colocando
		cout<<"insira o valor correspondente a linha "<<i+1<<" e a coluna "<<j+1<<endl;
		cin>>A[i][j];
		j++;
	}}
	transformar();//chama a função privada que cria a matriz B
	}
    
    void imprimir(int k){//imprime a matriz
   	int i=0,j=0;
	while(i<=(ordem-1)){//mesmo processo de preenchimento, mas ao inves de voce inserir valor por valor, ela imprime valor por valor usando setw para deixar bonito
		if(j>(ordem-1)){
			j=0;
			i++;
			cout<<endl;
		}
		if(i<=(ordem-1)){
		    if(k==1){
		        cout<<setw(8)<<A[i][j];
		    }
		    else{
	        	cout<<setw(8)<<B[i][j];
		    }
		j++;
	}}
	 
}
    private:
    void transformar(){//cria a matriz B, aqui, foram separados as possiveis casas em diferentes maneiras, quinas, bordas e meios
    int i=1,j=1,k=1;
    	while(i<=(ordem-2)){//faz a transformação nos meios, como estão "cercadas", é só fazer o processo padrão de analisar linha a linha, coluna a coluna e escanear as vizinhas a partir das variaveis de posição 
		if(j>(ordem-1)){
			j=1;
			i++;
		}
		if(i<=(ordem-2)){
		B[i][j]=(0.15)*(A[i-1][j]+A[i+1][j]+A[i][j-1]+A[i][j+1])+(A[i-1][j-1]+A[i-1][j+1]+A[i+1][j+1]+A[i+1][j-1])/10;
		j++;
	}}
	while(k<=(ordem-2)){//aqui analisamos os lados,lados são as bordas que não são quinas, então tem 5 quadrados para analizar, assim, foram divididas na borda de cima, baixo, esquerda e direita e novamente cada uma avalia seus vizinhos de acordo com o vetor posição 
	   B[k][0]=(0.15)*(A[k-1][0]+A[k+1][0]+A[k][1])+((A[k+1][1]+A[k-1][1])/10);//aqui é a borda da esquerda
	   B[k][ordem-1]=(0.15)*(A[k-1][ordem-1]+A[k+1][ordem-1]+A[k][ordem-2])+((A[k+1][ordem-2]+A[k-1][ordem-2])/10);//aqui é a borda da direita
	   B[0][k]=(0.15)*(A[0][k-1]+A[0][k+1]+A[1][k])+((A[1][k+1]+A[1][k-1])/10);//aqui é a borda de cima
	   B[ordem-1][k]=(0.15)*(A[ordem-1][k-1]+A[ordem-1][k+1]+A[ordem-2][k])+((A[ordem-2][k+1]+A[ordem-2][k-1])/10);//aqui é a borda de baixo
	   k++;
	}
	if(ordem==1){//aqui são as quinas, esse especificamente é no caso de uma matriz de ordem 1, onde não há vizinhos
	    B[0][0]=0;
	}
	else{//aqui são as quinas quando a ordem é maior que 1, assim, são separadas de jeito semelhante a dos lados, e sempre tem 3 vizinhas
	    B[0][0]=((A[1][1])/10)+0.15*A[0][1]+0.15*A[1][0];
	    B[0][ordem-1]=((A[1][ordem-2])/10)+(0.15)*(A[0][ordem-2]+A[1][ordem-1]);
	    B[ordem-1][0]=((A[ordem-2][1])/10)+(0.15)*(A[ordem-1][1]+A[ordem-2][0]);
	    B[ordem-1][ordem-1]=((A[ordem-2][ordem-2])/10)+(0.15)*(A[ordem-1][ordem-2] + A[ordem-2][ordem-1]);
	}
	cout<<endl;
}
};







int main(int argc, char** argv) {//é a main, onde os processos são chamados, com excessão da transformação 
	cout<<"insira a ordem da matriz quadrada"<<endl;
	processos p;
	cin>>p.ordem;//insere a variavel de ordem da matriz nas classes
    p.preencher();//deixa você preencher a matriz
    cout<<"A matriz A vale"<<endl;
    p.imprimir(1);//imprime a matriz A para você poder comparar
    cout<<endl<<"a matriz B vale"<<endl;;
	p.imprimir(2);//imprime a matriz B para você ver o resultado
	return 0;
}
